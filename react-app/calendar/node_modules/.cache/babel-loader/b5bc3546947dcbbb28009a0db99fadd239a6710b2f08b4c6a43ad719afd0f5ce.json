{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-calendar\\\\calendar\\\\src\\\\calendarComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import FullCalendar from '@fullcalendar/react';\n// import dayGridPlugin from '@fullcalendar/daygrid';\n\n// import { Modal, Button } from 'react-bootstrap';\n\n// import axios from 'axios';\n// import './styles.css'\n\n// const CalendarComponent = () => {\n//   const [events, setEvents] = useState([]);\n//   const [selectedEvent, setSelectedEvent] = useState(null);\n//   const [isModalOpen, setModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/events');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const handleDateClick = (info) => {\n//     setModalOpen(true);\n//   };\n\n//   const handleEventClick = (info) => {\n//     setSelectedEvent(info.event);\n//     setModalOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalOpen(false);\n//     setSelectedEvent(null);\n//   };\n\n//   return (\n//     <div className='container'>\n//         <div className='row'>\n//             <div className='col-lg-12'>\n\n//       <FullCalendar\n//         plugins={[dayGridPlugin]}\n//         initialView=\"dayGridMonth\"\n//         events={events}\n//         dateClick={handleDateClick}\n//         eventClick={handleEventClick}\n//       />\n\n//       <Modal show={isModalOpen} onHide={closeModal}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>{selectedEvent ? selectedEvent.title : 'Event Details'}</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           {selectedEvent && (\n//             <div>\n//               <p>Date: {selectedEvent.start.toLocaleDateString()}</p>\n//               <p>Time: {selectedEvent.start.toLocaleTimeString()}</p>\n//             </div>\n//           )}\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={closeModal}>\n//             Close\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//       </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CalendarComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport Modal from './Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [eventsForSelectedDate, setEventsForSelectedDate] = useState([]);\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/events');\n      const data = await response.json();\n      setEvents(data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n  const handleDateClick = arg => {\n    setSelectedDate(arg.date);\n    setModalOpen(true);\n    const eventsOnDate = events.filter(event => {\n      const eventDate = new Date(event.date); // Assuming date format is compatible with Date constructor\n      return eventDate.toDateString() === arg.date.toDateString();\n    });\n    setEventsForSelectedDate(eventsOnDate);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin],\n      initialView: \"dayGridMonth\",\n      events: events,\n      dateClick: handleDateClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), selectedDate && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalOpen,\n      onClose: handleCloseModal,\n      date: selectedDate,\n      events: eventsForSelectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"D3dNTuxbhdcTyCssSEo+xNjy7FE=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","Modal","jsxDEV","_jsxDEV","Calendar","_s","events","setEvents","selectedDate","setSelectedDate","modalOpen","setModalOpen","eventsForSelectedDate","setEventsForSelectedDate","fetchEvents","response","fetch","data","json","error","console","handleDateClick","arg","date","eventsOnDate","filter","event","eventDate","Date","toDateString","handleCloseModal","className","children","plugins","initialView","dateClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/react-calendar/calendar/src/calendarComponent.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import FullCalendar from '@fullcalendar/react';\r\n// import dayGridPlugin from '@fullcalendar/daygrid';\r\n\r\n// import { Modal, Button } from 'react-bootstrap';\r\n\r\n\r\n// import axios from 'axios';\r\n// import './styles.css'\r\n\r\n\r\n// const CalendarComponent = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get('http://localhost:5000/api/events');\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching events:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDateClick = (info) => {\r\n//     setModalOpen(true);\r\n//   };\r\n\r\n//   const handleEventClick = (info) => {\r\n//     setSelectedEvent(info.event);\r\n//     setModalOpen(true);\r\n//   };\r\n\r\n//   const closeModal = () => {\r\n//     setModalOpen(false);\r\n//     setSelectedEvent(null);\r\n//   };\r\n\r\n//   return (\r\n//     <div className='container'>\r\n//         <div className='row'>\r\n//             <div className='col-lg-12'>\r\n\r\n          \r\n\r\n//       <FullCalendar\r\n//         plugins={[dayGridPlugin]}\r\n//         initialView=\"dayGridMonth\"\r\n//         events={events}\r\n//         dateClick={handleDateClick}\r\n//         eventClick={handleEventClick}\r\n//       />\r\n\r\n//       <Modal show={isModalOpen} onHide={closeModal}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>{selectedEvent ? selectedEvent.title : 'Event Details'}</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           {selectedEvent && (\r\n//             <div>\r\n//               <p>Date: {selectedEvent.start.toLocaleDateString()}</p>\r\n//               <p>Time: {selectedEvent.start.toLocaleTimeString()}</p>\r\n//             </div>\r\n//           )}\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={closeModal}>\r\n//             Close\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n//       </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CalendarComponent;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport Modal from './Modal';\r\n\r\nconst Calendar = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [eventsForSelectedDate, setEventsForSelectedDate] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/events');\r\n      const data = await response.json();\r\n      setEvents(data);\r\n    } catch (error) {\r\n      console.error('Error fetching events:', error);\r\n    }\r\n  };\r\n\r\n  const handleDateClick = (arg) => {\r\n    setSelectedDate(arg.date);\r\n    setModalOpen(true);\r\n    const eventsOnDate = events.filter(event => {\r\n      const eventDate = new Date(event.date); // Assuming date format is compatible with Date constructor\r\n      return eventDate.toDateString() === arg.date.toDateString();\r\n    });\r\n    setEventsForSelectedDate(eventsOnDate);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        events={events}\r\n        dateClick={handleDateClick}\r\n      />\r\n      {selectedDate && (\r\n        <Modal\r\n          isOpen={modalOpen}\r\n          onClose={handleCloseModal}\r\n          date={selectedDate}\r\n          events={eventsForSelectedDate}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}