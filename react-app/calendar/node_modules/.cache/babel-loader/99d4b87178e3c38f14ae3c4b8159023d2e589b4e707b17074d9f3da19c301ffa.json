{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-calendar\\\\calendar\\\\src\\\\EventModal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventModal = ({\n  date,\n  closeModal\n}) => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    fetchEventsForDate(date);\n  }, [date]);\n  const fetchEventsForDate = async selectedDate => {\n    try {\n      const formattedDate = selectedDate.toISOString().split('T')[0];\n      const response = await axios.get(`http://localhost:5000/api/events?date=${formattedDate}`);\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: !!date,\n    onRequestClose: closeModal,\n    ariaHideApp: false,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Events on \", date === null || date === void 0 ? void 0 : date.toDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: events.map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), \" - \", event.time]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: closeModal,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(EventModal, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = EventModal;\nexport default EventModal;\nvar _c;\n$RefreshReg$(_c, \"EventModal\");","map":{"version":3,"names":["React","useEffect","useState","Modal","axios","jsxDEV","_jsxDEV","EventModal","date","closeModal","_s","events","setEvents","fetchEventsForDate","selectedDate","formattedDate","toISOString","split","response","get","data","error","console","isOpen","onRequestClose","ariaHideApp","children","toDateString","fileName","_jsxFileName","lineNumber","columnNumber","map","event","title","time","id","onClick","_c","$RefreshReg$"],"sources":["C:/react-calendar/calendar/src/EventModal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport axios from 'axios';\r\n\r\nconst EventModal = ({ date, closeModal }) => {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchEventsForDate(date);\r\n  }, [date]);\r\n\r\n  const fetchEventsForDate = async (selectedDate) => {\r\n    try {\r\n      const formattedDate = selectedDate.toISOString().split('T')[0];\r\n      const response = await axios.get(`http://localhost:5000/api/events?date=${formattedDate}`);\r\n      setEvents(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching events:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={!!date} onRequestClose={closeModal} ariaHideApp={false}>\r\n      {/* Use !!date to check if date is truthy */}\r\n      <h2>Events on {date?.toDateString()}</h2>\r\n      <ul>\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <strong>{event.title}</strong> - {event.time}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={closeModal}>Close</button>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EventModal;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdY,kBAAkB,CAACL,IAAI,CAAC;EAC1B,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMK,kBAAkB,GAAG,MAAOC,YAAY,IAAK;IACjD,IAAI;MACF,MAAMC,aAAa,GAAGD,YAAY,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9D,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAE,yCAAwCJ,aAAc,EAAC,CAAC;MAC1FH,SAAS,CAACM,QAAQ,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACEf,OAAA,CAACH,KAAK;IAACoB,MAAM,EAAE,CAAC,CAACf,IAAK;IAACgB,cAAc,EAAEf,UAAW;IAACgB,WAAW,EAAE,KAAM;IAAAC,QAAA,gBAEpEpB,OAAA;MAAAoB,QAAA,GAAI,YAAU,EAAClB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmB,YAAY,CAAC,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzCzB,OAAA;MAAAoB,QAAA,EACGf,MAAM,CAACqB,GAAG,CAAEC,KAAK,iBAChB3B,OAAA;QAAAoB,QAAA,gBACEpB,OAAA;UAAAoB,QAAA,EAASO,KAAK,CAACC;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,OAAG,EAACE,KAAK,CAACE,IAAI;MAAA,GADrCF,KAAK,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLzB,OAAA;MAAQ+B,OAAO,EAAE5B,UAAW;MAAAiB,QAAA,EAAC;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEZ,CAAC;AAACrB,EAAA,CA/BIH,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAiChB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}