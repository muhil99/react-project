{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-calendar\\\\calendar\\\\src\\\\one.jsx\",\n  _s = $RefreshSig$();\nimport '@mobiscroll/react/dist/css/mobiscroll.min.css';\nimport { Eventcalendar, getJson, setOptions, Toast } from '@mobiscroll/react';\nimport { useCallback, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nsetOptions({\n  theme: 'ios',\n  themeVariant: 'light'\n});\nfunction App() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [isToastOpen, setToastOpen] = useState(false);\n  const myView = useMemo(() => ({\n    calendar: {\n      labels: true\n    }\n  }), []);\n  const handleToastClose = useCallback(() => {\n    setToastOpen(false);\n  }, []);\n  const handlePageLoading = useCallback(args => {\n    const year = args.month.getFullYear();\n    const month = args.month.getMonth();\n    getJson('https://trial.mobiscroll.com/monthlyevents/?year=' + year + '&month=' + month + '&vers=5', data => {\n      setEvents(data);\n      setToastOpen(true);\n    }, 'jsonp');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Eventcalendar, {\n      clickToCreate: false,\n      dragToCreate: false,\n      dragToMove: false,\n      dragToResize: false,\n      eventDelete: false,\n      data: events,\n      view: myView,\n      onPageLoading: handlePageLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      message: \"New events loaded\",\n      isOpen: isToastOpen,\n      onClose: handleToastClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"AUMRmIEaTGMHbOEbpaQBjOOVhY4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Eventcalendar","getJson","setOptions","Toast","useCallback","useMemo","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","theme","themeVariant","App","_s","events","setEvents","isToastOpen","setToastOpen","myView","calendar","labels","handleToastClose","handlePageLoading","args","year","month","getFullYear","getMonth","data","children","clickToCreate","dragToCreate","dragToMove","dragToResize","eventDelete","view","onPageLoading","fileName","_jsxFileName","lineNumber","columnNumber","message","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/react-calendar/calendar/src/one.jsx"],"sourcesContent":["import '@mobiscroll/react/dist/css/mobiscroll.min.css';\r\n\r\nimport { Eventcalendar, getJson, setOptions, Toast } from '@mobiscroll/react';\r\nimport { useCallback, useMemo, useState } from 'react';\r\n\r\nsetOptions({\r\n  theme: 'ios',\r\n  themeVariant: 'light'\r\n});\r\n\r\nfunction App() {\r\n  const [events, setEvents] = useState([]);\r\n  const [isToastOpen, setToastOpen] = useState(false);\r\n\r\n  const myView = useMemo(() => ({ calendar: { labels: true } }), []);\r\n\r\n  const handleToastClose = useCallback(() => {\r\n    setToastOpen(false);\r\n  }, []);\r\n\r\n  const handlePageLoading = useCallback((args) => {\r\n    const year = args.month.getFullYear();\r\n    const month = args.month.getMonth();\r\n\r\n    getJson(\r\n      'https://trial.mobiscroll.com/monthlyevents/?year=' + year + '&month=' + month + '&vers=5',\r\n      (data) => {\r\n        setEvents(data);\r\n        setToastOpen(true);\r\n      },\r\n      'jsonp',\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Eventcalendar\r\n        clickToCreate={false}\r\n        dragToCreate={false}\r\n        dragToMove={false}\r\n        dragToResize={false}\r\n        eventDelete={false}\r\n        data={events}\r\n        view={myView}\r\n        onPageLoading={handlePageLoading}\r\n      />\r\n      <Toast message=\"New events loaded\" isOpen={isToastOpen} onClose={handleToastClose} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAO,+CAA+C;AAEtD,SAASA,aAAa,EAAEC,OAAO,EAAEC,UAAU,EAAEC,KAAK,QAAQ,mBAAmB;AAC7E,SAASC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvDR,UAAU,CAAC;EACTS,KAAK,EAAE,KAAK;EACZC,YAAY,EAAE;AAChB,CAAC,CAAC;AAEF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,WAAW,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMa,MAAM,GAAGd,OAAO,CAAC,OAAO;IAAEe,QAAQ,EAAE;MAAEC,MAAM,EAAE;IAAK;EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAElE,MAAMC,gBAAgB,GAAGlB,WAAW,CAAC,MAAM;IACzCc,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,iBAAiB,GAAGnB,WAAW,CAAEoB,IAAI,IAAK;IAC9C,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAACC,WAAW,CAAC,CAAC;IACrC,MAAMD,KAAK,GAAGF,IAAI,CAACE,KAAK,CAACE,QAAQ,CAAC,CAAC;IAEnC3B,OAAO,CACL,mDAAmD,GAAGwB,IAAI,GAAG,SAAS,GAAGC,KAAK,GAAG,SAAS,EACzFG,IAAI,IAAK;MACRb,SAAS,CAACa,IAAI,CAAC;MACfX,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,EACD,OACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACEtB,OAAA,CAACR,aAAa;MACZ+B,aAAa,EAAE,KAAM;MACrBC,YAAY,EAAE,KAAM;MACpBC,UAAU,EAAE,KAAM;MAClBC,YAAY,EAAE,KAAM;MACpBC,WAAW,EAAE,KAAM;MACnBN,IAAI,EAAEd,MAAO;MACbqB,IAAI,EAAEjB,MAAO;MACbkB,aAAa,EAAEd;IAAkB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFjC,OAAA,CAACL,KAAK;MAACuC,OAAO,EAAC,mBAAmB;MAACC,MAAM,EAAE1B,WAAY;MAAC2B,OAAO,EAAEtB;IAAiB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACrF,CAAC;AAEP;AAAC3B,EAAA,CAvCQD,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}